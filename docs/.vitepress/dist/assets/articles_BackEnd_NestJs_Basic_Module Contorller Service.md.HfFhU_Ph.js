import{_ as s,o as i,c as a,R as n}from"./chunks/framework.SHoGXsR8.js";const g=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"articles/BackEnd/NestJs/Basic/Module Contorller Service.md","filePath":"articles/BackEnd/NestJs/Basic/Module Contorller Service.md","lastUpdated":null}'),l={name:"articles/BackEnd/NestJs/Basic/Module Contorller Service.md"},e=n(`<ul><li><p>Nest 请求声明周期</p></li><li><p>[[Provider]]</p><ul><li>动态Provider</li><li>asynProvider</li></ul></li><li><p>Module</p><ul><li>静态模块</li><li>动态模块</li><li>全局模块</li></ul></li><li><p>[[env配置相关]]</p></li></ul><h2 id="module-controller-service的关系" tabindex="-1">Module Controller Service的关系 <a class="header-anchor" href="#module-controller-service的关系" aria-label="Permalink to &quot;Module Controller Service的关系&quot;">​</a></h2><blockquote><p><code>Module</code> 提供了一个模块化的方式来组织和管理您的应用程序的代码，同时还允许您使用依赖注入和模块之间的依赖关系来构建更加可扩展的应用程序。 $$ Module是Nestjs应用程序的基本构建块，每个模块都有一个独立的作用域，其中包含一组相关的Controller,service和其他提供者（provider） Module的作用是将应用程序拆分为更小的可重用部分，以便更好的组织代码和管理依赖关系$$</p></blockquote><blockquote><p>Controller提供一个路由处理器，他可以将HTTP请求映射到响应的处理器方法上，并将处理器方法的结果作为HTTP响应返回给Client $$Controller是处理 HTTP请求并返回HTTP响应的类，Controller的作用是将路由映射到处理请求方法上，在Controller中可以使用Nestjs提供的装饰器来定义 路由,中间件,pipe,dto和请求参数等 $$</p></blockquote><blockquote><p>Service提供一种实现业务逻辑的方式，他可以访问操作数据，同事还可以与其他服务交互以完成复杂的业务逻辑 $$Service是处理应用程序逻辑的类，将业务逻辑从Controller中分离出来，使得Controller只需处理HTTP请求和响应，而不需要处理业务逻辑。在Service中，可以编写业务逻辑和调用其他服务$$</p></blockquote><h2 id="nest-请求生命周期" tabindex="-1">Nest 请求生命周期 <a class="header-anchor" href="#nest-请求生命周期" aria-label="Permalink to &quot;Nest 请求生命周期&quot;">​</a></h2><p><img src="https://doc.houdunren.com/assets/img/pasted-from-clipboard.415797fd.png" alt="img"></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  收到请求</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  全局绑定的中间件</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  模块绑定的中间件</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  全局守卫</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  控制层守卫</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  路由守卫</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">7.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  全局拦截器（控制器之前）</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  控制器层拦截器 （控制器之前）</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">9.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  路由拦截器 （控制器之前）</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  全局管道</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">11.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  控制器管道</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">12.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  路由管道</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">13.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  路由参数管道</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">14.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  控制器（方法处理器）</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">15.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  路由拦截器（请求之后）</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">16.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  控制器拦截器 （请求之后）</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">17.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  全局拦截器 （请求之后）</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">18.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  异常过滤器 （路由，之后是控制器，之后是全局）</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">19.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  服务器响应</span></span></code></pre></div><h2 id="provider" tabindex="-1">[[Provider]] <a class="header-anchor" href="#provider" aria-label="Permalink to &quot;[[Provider]]&quot;">​</a></h2><pre><code>提供服务,用于表示应用程序中可注入的任何东西。除了服务，Provider 还可以提供其他类型的对象，例如 Factory 工厂、配置对象、连接对象等。
</code></pre><ul><li>提供者使用 <strong>@Injectable()</strong> 装饰器定义，这样系统会分析 <strong>constructor</strong> 进行依赖注入</li><li>提供者在模块的 <strong>providers</strong> 属性中定义，用于注册到服务容器中，用于被其他类依赖注入</li><li>提供者可以在自身的constructor构造函数中依赖注入其他服务提供者，需要使用 <strong>@Injectable()</strong> 装饰器声明该提供者</li><li>注册到容器的提供者，默认只对当前模块有效，即作用域为模块</li><li>可以使用 <strong>exports</strong> 导出给其他模块使用</li><li>提供者是单例的4</li><li>提供者可以是任何值，而不仅仅是服务类 $$ Provider 提供者是 NestJS 应用程序中的核心概念之一，它们将代码块标记为可注入的，并提供与其它代码块之间的依赖关系。当需要在组件或控制器中使用一个实例时，NestJS 会自动处理依赖关系并将实例提供给需要的组件或控制器。 $$</li></ul><h2 id="module" tabindex="-1">Module <a class="header-anchor" href="#module" aria-label="Permalink to &quot;Module&quot;">​</a></h2><pre><code>模块是一个子程序，用于定义控制器，提供者或向其他模块开放提供者（开放模块的API）
</code></pre><ul><li>默认情况下控制器，提供者在当前模块可用，即模块作用域</li><li>若果向其他模块提供服务可以将提供者定义在export属性中，其他模块需要再imports属性中引入当前模块</li><li>模块是[[设计模式模式]]的，多个模块共享当前模块实例</li><li>模块提供者也是单例，所以模块被多个其他模块使用，那该模块的provider也是共享的</li></ul><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	//导入其他模块</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  imports: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    JwtModule.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">registerAsync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      imports: [ConfigModule],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      inject: [ConfigService],</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      useFactory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">configService</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ConfigService</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          secret: configService.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;app.token_secret&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          expiresIn: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;100d&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ],</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  //模块提供者</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  providers: [AuthService, JwtStrategy],</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  //控制器</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  controllers: [AuthController],</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  //向外提供接口</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  exports: [AuthService],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AuthModule</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {}</span></span></code></pre></div><pre><code>## 动态Module
</code></pre>`,16),t=[e];function p(h,k,r,E,o,d){return i(),a("div",null,t)}const y=s(l,[["render",p]]);export{g as __pageData,y as default};
