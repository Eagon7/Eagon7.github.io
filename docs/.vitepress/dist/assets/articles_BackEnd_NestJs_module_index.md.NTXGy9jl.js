import{_ as s,o as i,c as t,R as a}from"./chunks/framework.SHoGXsR8.js";const g=JSON.parse('{"title":"全局Module和生命周期","description":"","frontmatter":{},"headers":[],"relativePath":"articles/BackEnd/NestJs/module/index.md","filePath":"articles/BackEnd/NestJs/module/index.md","lastUpdated":null}'),l={name:"articles/BackEnd/NestJs/module/index.md"},e=a(`<h1 id="全局module和生命周期" tabindex="-1">全局Module和生命周期 <a class="header-anchor" href="#全局module和生命周期" aria-label="Permalink to &quot;全局Module和生命周期&quot;">​</a></h1><ul><li>模块导出 provider，另一个模块需要 imports 它才能用这些 provider。</li><li>多个模块需要用到同一个 provider 时，可以把这个 provider 放到一个模块中，然后 imports 这个模块。</li><li>也可以直接把这个模块设置为全局模块，这样就不需要 imports 了。</li></ul><h2 id="全局模块" tabindex="-1">全局模块 <a class="header-anchor" href="#全局模块" aria-label="Permalink to &quot;全局模块&quot;">​</a></h2><p><strong>注意:全局模块不推荐经常使用，注入太多的provider不清楚来源，可维护性差</strong></p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Global</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    imports: [PrismaModule],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    providers: [AService],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    controllers: [AController],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    exports: [AService],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AModule</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {}</span></span></code></pre></div><h2 id="生命周期lifecycle" tabindex="-1">生命周期Lifecycle <a class="header-anchor" href="#生命周期lifecycle" aria-label="Permalink to &quot;生命周期Lifecycle&quot;">​</a></h2><p><strong>Nest 在启动的时候，会递归解析 Module 依赖，扫描其中的 provider、controller，注入它的依赖。 全部解析完后，会监听网络端口，开始处理请求。</strong></p><p>这个过程中，Nest 暴露了一些生命周期方法：</p><ol><li><p>首先，递归初始化模块，依次次调用模块内 controller,provider 的onModuleInit方法，然后在调用module的onModuleInit方法</p></li><li><p>全部初始化完之后，再依次调用模块内的 controller、provider 的 onApplicationBootstrap 方法，然后调用 module 的 onApplicationBootstrap 方法</p></li><li><p>然后监听网络端口。</p></li><li><p>之后 Nest 应用就正常运行了。</p></li></ol><p><strong>这个过程中，onModuleInit、onApplicationBootstrap等 都是我们可以实现的生命周期方法。</strong></p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Controller</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;ccc&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CccController</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> implements</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> OnModuleInit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">OnApplicationBootstrap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> readonly</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> cccService</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CccService</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  onApplicationBootstrap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  onModuleInit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {}</span></span></code></pre></div><table><thead><tr><th>生命周期</th><th style="text-align:center;">作用</th></tr></thead><tbody><tr><td>onApplicationBootstrap</td><td style="text-align:center;">初始化</td></tr><tr><td>onModuleInit</td><td style="text-align:center;">初始化</td></tr><tr><td>onModuleDestroy</td><td style="text-align:center;">销毁</td></tr><tr><td>beforeApplicationShutdown</td><td style="text-align:center;">销毁前</td></tr><tr><td>onApplicationShutdown</td><td style="text-align:center;">销毁</td></tr></tbody></table><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>模块可以@Global声明为全局，这样它export的provider就可以在各处使用了，不需要imports</p><p>provider,controller,module都支持启动和销毁函数，这些生命周期函数都支持async的方式</p><p>可以在里面做一些初始化，销毁的逻辑，如onApplicationShutown里通过moduleRef.get取出一些provider,执行关闭连接等销毁逻辑 全局模块，声明周期，moduleRef都是Nest常用功能</p></div>`,14),n=[e];function p(r,o,h,d,k,c){return i(),t("div",null,n)}const y=s(l,[["render",p]]);export{g as __pageData,y as default};
